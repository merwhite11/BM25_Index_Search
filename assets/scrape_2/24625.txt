How do I measure occultation for the upcoming lunar eclipse?

I'm trying to simulate the lunar eclipse on Jan. 31, similar to this simulation I made of last year's solar eclipse, using Three.js. I have the minute-by-minute coordinates for the Sun and the Moon in the J2000 frame -- where Earth is always at [0,0,0] -- and need to calculate the degree of occultation at each moment.
I'm treating the Sun as a point, since that's how 3D lighting works in Three.js, and came up with what I think is a clever solution to account for the penumbra: I calculated what size the Earth would have to be to create the penumbra from a point instead of a large spherical light source, like so:

(This obviously isn't to scale, but the inner circle would be the actual earth, the black lines are the penumbral rays from the Sun, and the blue lines originate from the center of the sun but reach the plane of the moon (the little gray guy) at exactly the same point.)
To test whether this actually works, I need to calculate the occultation of the moon and my imaginary Penumbral Earth (which is 8154.15km in radius), and compare those figures to Fred Espenak's calculations.
I found this StackOverflow post on how to calculate the angle between two vectors in 3D space. What I can't figure out his how to determine the apparent width of that angle and whether it is greater than the sum of the apparent radii of the Earth and Moon. I thought the Law of Cosines would be sufficient, but it accounts for the distance between the Earth and Moon as well. Here's a to-scale simulation showing the path of the moon over 24-hours on Jan. 31, with the Sun way off-screen:

One idea I had was to measure the vector from the sun to the outer edge of the fake earth, and the vector from the sun to the inner edge of the moon, but cannot figure out how to determine the points on the sphere where these vectors would be tangent. (I posed this question to Math StackExchange, but am hoping there's an easier way.)
While SPICE (via the Python wrapper spiceypy) was perfect for getting the locations of the bodies, it's occultation function doesn't allow for an arbitrary location of the observer, which eventually I will need to account for.
Is there an easy--or difficult--equation for occultation? Thanks!